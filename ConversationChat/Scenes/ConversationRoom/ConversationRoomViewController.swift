//
//  ConversationRoomViewController.swift
//  ConversationChat
//
//  Created by Raul Humberto Mantilla Assia on 10/23/18.
//  Copyright (c) 2018 Raul Mantilla. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol ConversationRoomDisplayLogic: class
{
    func displayMessages(viewModel: ConversationRoom.FetchMessages.ViewModel)
    func displayMessage(viewModel: ConversationRoom.SendMessage.ViewModel)
}


class ConversationRoomViewController: UIViewController, ConversationRoomDisplayLogic {
    
    var interactor: ConversationRoomBusinessLogic?
    var router: (NSObjectProtocol & ConversationRoomRoutingLogic & ConversationRoomDataPassing)?
    var displayedMessages: [ConversationRoom.DisplayedMessage] = []
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    @IBOutlet weak var inputTextViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var textInputView: TextInputView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ConversationRoomInteractor()
        let presenter = ConversationRoomPresenter()
        let router = ConversationRoomRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.navigationItem.title = router?.dataStore?.title
        addKeyboardObservers()
        textInputView.delegate = self
        setupCollectionView()
        fetchMessages()
    }
    
    func fetchMessages()
    {
        let request = ConversationRoom.FetchMessages.Request()
        interactor?.fetchMessages(request: request)
    }
    
    func displayMessages(viewModel: ConversationRoom.FetchMessages.ViewModel)
    {
        displayedMessages = viewModel.displayedMessages
        collectionView.reloadData()
        collectionView.performBatchUpdates(nil, completion: {
            (result) in
            self.collectionView.scrollToBottom(animated: false)
        })
    }
    
    func displayMessage(viewModel: ConversationRoom.SendMessage.ViewModel)
    {
        displayedMessages.append(viewModel.displayedMessage)
        collectionView.reloadData()
        collectionView.performBatchUpdates(nil, completion: {
            (result) in
            self.collectionView.scrollToBottom(animated: true)
        })
    }
}


// MARK: - TextInputViewProtocol Delegates implementation

extension ConversationRoomViewController: TextInputViewProtocol {
    func textInputViewDidChange(size: CGSize) {
        if inputTextViewHeightConstraint.constant != size.height {
        inputTextViewHeightConstraint.constant = size.height
        
        let  collectionViewOffset = CGPoint(x: 0, y: collectionView.contentSize.height - collectionView.bounds.size.height + 20)
        collectionView.setContentOffset(collectionViewOffset, animated: false)
        }
    }
    
    func textInputViewDidPressSendButton(withText text: String){
        let message = ConversationRoom.SendMessage.Request.Message(chat_room_id: 0, from_id: 0, to_id: 0, message: text)
        let request  = ConversationRoom.SendMessage.Request(message: message)
        interactor?.sendMessage(request: request)
    }
}


// MARK: - UICollectionView Delegates implementation

extension ConversationRoomViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
{
    func setupCollectionView()
    {
        collectionView?.backgroundColor = UIColor.white
        collectionView?.register(ChatMessageCell.self, forCellWithReuseIdentifier: String(describing: ChatMessageCell.self))
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
    {
        return displayedMessages.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
    {
        let displayedMessage = displayedMessages[indexPath.row]
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: ChatMessageCell.self), for: indexPath) as? ChatMessageCell else { return UICollectionViewCell() }
        cell.setup(withDisplayedMessage: displayedMessage)
        
        let size = CGSize(width: (view.frame.width * 0.60), height: 1000)
        let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)
        let estimatedFrame =  NSString(string: displayedMessage.message).boundingRect(
            with: size,
            options: options,
            attributes: [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 14.0)],
            context: nil)
        if displayedMessage.isReaded {
            cell.messageTextView.frame = CGRect(x: 40 + 18, y: 0, width: estimatedFrame.width + 14, height: estimatedFrame.height + 20)
            cell.textBubbleView.frame = CGRect(x: 40, y: -4, width: estimatedFrame.width + 14 + 16 + 12, height: estimatedFrame.height + 20 + 6)
            
            cell.profileImageView.isHidden = false
            
            cell.bubbleImageView.tintColor = UIColor(white: 0.95, alpha: 1)
            cell.messageTextView.textColor = UIColor.black
            cell.bubbleImageView.image = ChatMessageCell.grayImage
        } else {
            cell.messageTextView.frame = CGRect(x: view.frame.width - estimatedFrame.width - 16 - 16 - 8, y: 0, width: estimatedFrame.width + 16, height: estimatedFrame.height + 20)
            cell.textBubbleView.frame = CGRect(x: view.frame.width - estimatedFrame.width - 32 - 18, y: -4, width: estimatedFrame.width + 8 + 16 + 10, height: estimatedFrame.height + 20 + 6)
            
            cell.profileImageView.isHidden = true
            
            cell.bubbleImageView.tintColor = UIColor(red: 0, green: 137/255, blue: 249/255, alpha: 1)
            cell.messageTextView.textColor = UIColor.white
            cell.bubbleImageView.image = ChatMessageCell.blueImage
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView,layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let displayedMessage = displayedMessages[indexPath.row]
        let message = displayedMessage.message
        
        let size = CGSize(width: (view.frame.width * 0.60), height: 1000)
        let options = NSStringDrawingOptions.usesFontLeading.union(.usesLineFragmentOrigin)
        let estimatedFrame =  NSString(string: message).boundingRect(
            with: size,
            options: options,
            attributes: [NSAttributedStringKey.font: UIFont.systemFont(ofSize: 14.0)],
            context: nil)
        
        return CGSize(width: view.frame.width, height: estimatedFrame.height + 20)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 8, left: 0, bottom: 8, right: 0)
    }
}

extension ConversationRoomViewController
{
    func addKeyboardObservers() {
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(self.keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
        collectionView?.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tap)))
    }
    
    @objc func tap(sender: UITapGestureRecognizer){
        textInputView.messageTextView.resignFirstResponder()
        collectionView.scrollToBottom(animated: false)
    }
    
    @objc func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y == 0{
                self.view.frame.origin.y -= keyboardSize.height
            }
        }
    }
    
    @objc func keyboardWillHide(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y != 0{
                self.view.frame.origin.y += keyboardSize.height
            }
        }
    }
}
